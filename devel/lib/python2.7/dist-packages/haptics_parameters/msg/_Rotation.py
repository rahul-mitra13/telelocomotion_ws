# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from haptics_parameters/Rotation.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Rotation(genpy.Message):
  _md5sum = "c49cdc76b12ca71c6835d0870e0b24dd"
  _type = "haptics_parameters/Rotation"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 m00
float64 m01
float64 m02
float64 m10
float64 m11
float64 m12
float64 m20
float64 m21
float64 m22
"""
  __slots__ = ['m00','m01','m02','m10','m11','m12','m20','m21','m22']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       m00,m01,m02,m10,m11,m12,m20,m21,m22

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Rotation, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.m00 is None:
        self.m00 = 0.
      if self.m01 is None:
        self.m01 = 0.
      if self.m02 is None:
        self.m02 = 0.
      if self.m10 is None:
        self.m10 = 0.
      if self.m11 is None:
        self.m11 = 0.
      if self.m12 is None:
        self.m12 = 0.
      if self.m20 is None:
        self.m20 = 0.
      if self.m21 is None:
        self.m21 = 0.
      if self.m22 is None:
        self.m22 = 0.
    else:
      self.m00 = 0.
      self.m01 = 0.
      self.m02 = 0.
      self.m10 = 0.
      self.m11 = 0.
      self.m12 = 0.
      self.m20 = 0.
      self.m21 = 0.
      self.m22 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9d().pack(_x.m00, _x.m01, _x.m02, _x.m10, _x.m11, _x.m12, _x.m20, _x.m21, _x.m22))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.m00, _x.m01, _x.m02, _x.m10, _x.m11, _x.m12, _x.m20, _x.m21, _x.m22,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9d().pack(_x.m00, _x.m01, _x.m02, _x.m10, _x.m11, _x.m12, _x.m20, _x.m21, _x.m22))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.m00, _x.m01, _x.m02, _x.m10, _x.m11, _x.m12, _x.m20, _x.m21, _x.m22,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
